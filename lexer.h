#pragma once

// Not all tokens are going to be implemented yet
enum Token 
{
	// KEYWORDS 
	TOK_AUTO,
	TOK_BREAK,
	TOK_CASE,
	TOK_CHAR,
	TOK_CONST,
	TOK_CONTINUE,
	TOK_DEFAULT,
	TOK_DO,
	TOK_DOUBLE,
	TOK_ELSE,
	TOK_ENUM,
	TOK_FLOAT,
	TOK_FOR,
	TOK_GOTO,
	TOK_IF,
	TOK_INLINE,
	TOK_INT,
	TOK_LONG,
	TOK_RETURN,
	TOK_SHORT,
	TOK_SIGNED,
	TOK_SIZEOF,
	TOK_STATIC,
	TOK_STRUCT,
	TOK_SWITCH,
	TOK_TYPEDEF,
	TOK_UNION,
	TOK_UNSIGNED,
	TOK_VOID,
	TOK_WHILE,

	// GENERAL
	TOK_IDENTIFIER,
	TOK_CONSTANT,
	TOK_STRING_LITERAL,

	// PUNCTUATORS 
	TOK_OPEN_SQR_BRACK,
	TOK_CLOSE_SQR_BRACK,
	TOK_OPEN_PAREN,
	TOK_CLOSE_PAREN,
	TOK_OPEN_BRACK,
	TOK_CLOSE_BRACK,
	TOK_PERIOD,
	TOK_RIGHT_ARROW,
	TOK_INCREMENT,
	TOK_DECREMENT,
	TOK_AMPERSAND,
	TOK_STAR,
	TOK_PLUS,
	TOK_MINUS,
	TOK_TILDE,
	TOK_BANG,
	TOK_FORWARD_SLASH,
	TOK_PERCENT,
	TOK_BIT_SHIFT_LEFT,
	TOK_BIT_SHIFT_RIGHT,
	TOK_LSS,
	TOK_GTR,
	TOK_LSS_EQL,
	TOK_GTR_EQL,
	TOK_EQUALITY,
	TOK_EQUALITY_NOT,
	TOK_CARET,
	TOK_PIPE,
	TOK_AND,
	TOK_OR,
	TOK_COLON,
	TOK_SEMI_COLON,
	TOK_EQUAL,
	TOK_COMMA,
};

// clang-format off
// The string representation of keywords
const char *const keywords_str[] = 
{
	"auto",
	"break",
	"case",
	"char",
	"const",
	"continue",
	"default",
	"do",
	"double",
	"else",
	"enum",
	"float",
	"for",
	"goto",
	"if",
	"inline",
	"int",
	"long",
	"return",
	"short",
	"signed",
	"sizeof",
	"static",
	"typedef",
	"union",
	"unsigned",
	"void",
	"while"
};

// The token equivalent of each element in keywords_str
const enum Token keywords_tok[] = 
{
	TOK_AUTO,
	TOK_BREAK,
	TOK_CASE,
	TOK_CHAR,
	TOK_CONST,
	TOK_CONTINUE,
	TOK_DEFAULT,
	TOK_DO,
	TOK_DOUBLE,
	TOK_ELSE,
	TOK_ENUM,
	TOK_FLOAT,
	TOK_FOR,
	TOK_GOTO,
	TOK_IF,
	TOK_INLINE,
	TOK_INT,
	TOK_LONG,
	TOK_RETURN,
	TOK_SHORT,
	TOK_SIGNED,
	TOK_SIZEOF,
	TOK_STATIC,
	TOK_TYPEDEF,
	TOK_UNION,
	TOK_UNSIGNED,
	TOK_VOID,
	TOK_WHILE
};

const char single_punctuator_char[] = 
{
		'[',
		']',
		'(',
		')',
		'{',
		'}',
		'.',
		'&',
		'*',
		'+',
		'-',
		'~',
		'!',
		'/',
		'%',
		'<',
		'>',
		'^',
		'|',
		':',
		';',
		'=',
		',',
};

const enum Token single_punctuator_tok[] =
{
		TOK_OPEN_SQR_BRACK,
		TOK_CLOSE_SQR_BRACK,
		TOK_OPEN_PAREN,
		TOK_CLOSE_PAREN,
		TOK_OPEN_BRACK,
		TOK_CLOSE_BRACK,
		TOK_PERIOD,
		TOK_AMPERSAND,
		TOK_STAR,
		TOK_PLUS,
		TOK_MINUS,
		TOK_TILDE,
		TOK_BANG,
		TOK_FORWARD_SLASH,
		TOK_PERCENT,
		TOK_LSS,
		TOK_GTR,
		TOK_CARET,
		TOK_PIPE,
		TOK_COLON,
		TOK_SEMI_COLON,
		TOK_EQUAL,
		TOK_COMMA
};
// clang-format on
